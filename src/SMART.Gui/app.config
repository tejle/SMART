<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <configSections>
    <section name="unity" type="Microsoft.Practices.Unity.Configuration.UnityConfigurationSection,               Microsoft.Practices.Unity.Configuration" />
  </configSections>
  <runtime>

	  <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">

	   <dependentAssembly>

	    <assemblyIdentity name="Microsoft.Practices.ServiceLocation" publicKeyToken="31bf3856ad364e35" culture="neutral" />

	    <bindingRedirect oldVersion="0.0.0.0-1.0.0.0" newVersion="1.0.0.0" />

	   </dependentAssembly>

	  </assemblyBinding>
  </runtime>

  <!--<system.diagnostics>
    <sources>

      <source name="System.Windows.Data" switchName="SourceSwitch" >
        <listeners>
          <add name="textListener" />
        </listeners>
      </source>
    </sources>
      <switches>
        <add name="SourceSwitch" value="All" />
      </switches>

      <sharedListeners>
        <add name="textListener"
        type="System.Diagnostics.TextWriterTraceListener"
        initializeData="DebugTrace.txt" />
      </sharedListeners>

      <trace autoflush="true" indentsize="4"></trace>

    </system.diagnostics>-->

  <!--<system.diagnostics>
    <sources>
      <source name="System.Windows.Data" switchName="SourceSwitch">
        <listeners>
          --><!--<add name="errorListener"/>--><!--
          --><!--<add name="informationListener"/>--><!--
          --><!--<add name="warningListener"/>--><!--
        </listeners>
      </source>
    </sources>
    <switches>
      <add name="SourceSwitch" value="All"/>
    </switches>
    
    <sharedListeners>
      <add name="errorListener" type="System.Diagnostics.TextWriterTraceListener" initializeData="TraceError.log">
        <filter type="System.Diagnostics.EventTypeFilter" initializeData="Error"/>
      </add>
      <add name="informationListener" type="System.Diagnostics.TextWriterTraceListener" initializeData="TraceInformation.log">
        <filter type="System.Diagnostics.EventTypeFilter" initializeData="Information"/>
      </add>
      <add name="warningListener" type="System.Diagnostics.TextWriterTraceListener" initializeData="TraceWarning.log">
        <filter type="System.Diagnostics.EventTypeFilter" initializeData="Warning"/>
      </add>
    </sharedListeners>
    <trace autoflush="true" indentsize="4">
      <listeners>
        <add name="smartListener" type="System.Diagnostics.TextWriterTraceListener" initializeData="TraceSmart.log" />
      </listeners>
    </trace>
  </system.diagnostics>-->
  <unity>
    <typeAliases>
      <!-- Lifetime manager types -->
      <typeAlias alias="singleton" type="Microsoft.Practices.Unity.ContainerControlledLifetimeManager, Microsoft.Practices.Unity" />

    </typeAliases>
    <containers>
      <container>
        <types>
          <type type="SMART.Core.BusinessLayer.IBusinessLayer,SMART.Core" mapTo="SMART.Core.BusinessLayer.ApplicationManager,SMART.Core" />
          <type type="SMART.Core.Interfaces.ITestcase,SMART.Core" mapTo="SMART.Core.DomainModel.Testcase,SMART.Core" />
          <type type="SMART.Core.Interfaces.IProject,SMART.Core" mapTo="SMART.Core.DomainModel.Project,SMART.Core" />
          <type type="SMART.Core.DomainModel.Model,SMART.Core" mapTo="SMART.Core.DomainModel.Model,SMART.Core" />
          <type type="SMART.Core.BusinessLayer.IStatisticsManager,SMART.Core" mapTo="SMART.Core.BusinessLayer.StatisticsManager,SMART.Core" />
          <type type="SMART.Core.DataLayer.IProjectIOHandler,SMART.Core" mapTo="SMART.Core.DataLayer.ProjectIOHandler,SMART.Core" />
          <type type="SMART.Core.DataLayer.IProjectReader,SMART.Core" mapTo="SMART.Core.DataLayer.ProjectReader,SMART.Core" />
          <type type="SMART.Core.DataLayer.IModelReader,SMART.Core" mapTo="SMART.Core.DataLayer.ModelReader,SMART.Core" />
          <type type="SMART.Core.DataLayer.ITestcaseReader,SMART.Core" mapTo="SMART.Core.DataLayer.TestcaseReader,SMART.Core" />
          <type type="SMART.Core.DataLayer.IProjectWriter,SMART.Core" mapTo="SMART.Core.DataLayer.ProjectWriter,SMART.Core" />
          <type type="SMART.Core.DataLayer.IModelWriter,SMART.Core" mapTo="SMART.Core.DataLayer.ModelWriter,SMART.Core" />
          <type type="SMART.Core.DataLayer.ITestcaseWriter,SMART.Core" mapTo="SMART.Core.DataLayer.TestcaseWriter,SMART.Core" />
          <type type="SMART.Core.Interfaces.ISandbox,SMART.Core" mapTo="SMART.Base.Sandboxes.Sandbox,SMART.Base" />
          <type type="SMART.Core.IModelBuilder,SMART.Core" mapTo="SMART.Core.ModelBuilder,SMART.Core" />
          <type type="SMART.Core.BusinessLayer.ITestcaseExecutor,SMART.Core" mapTo="SMART.Core.BusinessLayer.TestcaseExecutor,SMART.Core" />
          <type type="SMART.Core.Interfaces.Services.IProjectService, SMART.Core" mapTo="SMART.Core.Services.ProjectService, SMART.Core.Services" />
          <type type="SMART.Core.Interfaces.Services.ITestcaseService, SMART.Core" mapTo="SMART.Core.Services.TestcaseService, SMART.Core.Services" />
          <type type="SMART.Core.Interfaces.Services.IModelService, SMART.Core" mapTo="SMART.Core.Services.ModelService, SMART.Core.Services" />
              <type type="System.Random, mscorlib" mapTo="System.Random, mscorlib">
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement,                 Microsoft.Practices.Unity.Configuration">
              <constructor />
            </typeConfig>
          </type>

        </types>
      </container>
    </containers>
  </unity>
<startup><supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.6" /></startup></configuration>
